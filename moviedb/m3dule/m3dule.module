<?php
// use \Drupal\comment\CommentInterface;
// use Drupal\Core\Url;
// function m3dule_comment_links_alter(array &$links, CommentInterface $entity, array &$context) {
//   $links['m3dule'] = array(
//     '#theme' => 'links__comment__m3dule',
//     '#attributes' => array(
//       'class' => array(
//         'links',
//         'inline',
//       ),
//     ),
//     '#links' => array(
//       'comment-report' => array(
//         'title' => t('Report'),
//         'url' => Url::fromRoute('m3dule_movie', [
//           'comment' => $entity
//             ->id()
//         ], [
//           'query' => [
//             'token' => \Drupal::getContainer()
//               ->get('csrf_token')
//               ->get("comment/{$entity->id()}/report"),
//           ],
//         ]),
//       ),
//     ),
//   );
// }

// function m3dule_comment_links_alter(array &$links, CommentInterface $entity, array &$context) {
//   // Unset the "login and register link" link
//   if(isset($links['comment']['#links']['comment-login'])) {
//     unset($links['comment']['#links']['comment-login']);
//   }
//   if(isset($links['comment']['#links']['comment-register'])) {
//     unset($links['comment']['#links']['comment-register']);
//   }
// }
/**
 * Implements hook_update_N().
 */
 /**
  * Defines the advertiser entity.
  *
  * @ingroup advertiser
  *
  * @ContentEntityType(
  *   id = "advertiser",
  *   label = @Translation("advertiser"),
  *   base_table = "advertiser",
  *   entity_keys = {
  *     "id" = "id",
  *     "uuid" = "uuid",
  *   },
  * )
  */
function m3dule_update_8701() {
  \Drupal::entityDefinitionUpdateManager()->installEntityType(new ConfigEntityType([
    'id' => 'advertiser_type',
    'label' => new TranslatableMarkup('Advertiser Type'),
    'entity_keys' => ['id' => 'id', 'uuid' => 'uuid'],
    'config_export' => [
      'id',
    ],
    ]));
}
/**
 * Update 8001 - Create maestro_process_status entity.
 */
// function m3dule_update_8001() {
//   //check if the table exists first.  If not, then create the entity.
//   if(!db_table_exists('advertiser')) {
//     \Drupal::entityTypeManager()->clearCachedDefinitions();
//     \Drupal::entityDefinitionUpdateManager()
//       ->installEntityType(\Drupal::entityTypeManager()->getDefinition('advertiser'));
//   }
//   else {
//     return 'Process Status entity already exists';
//   }
// }
/**
   * Implemetation of hook_page_attachments function.
   * This function is used to attach a file to a set or subset of pages.
   * @param  $page an array of page on which file will be attached.
*/

function m3dule_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'm3dule/m3dule_css';
}

/**
   * Implemetation of hook_theme function.
   * This function is used to return a renderable array for different themes.
   * @param  $existing, $type, $theme, $path
   * @return mixed
*/
function m3dule_theme($existing, $type, $theme, $path) {
  return array(
    'movie_list' => array(
      'variables' => array('items' => array(), 'form' => array(), 'title' => '')
    ),
    'actor_list' => array(
      'variables' => array('items' => array(), 'title' => '')
    ),
    'actor_movies_list' => array(
      'variables' => array('items' => array(), 'title' => '')
    ),
    'filterbyname' => array(
      'render element' => 'form',
    ),
    'list' => array(
      'variables' => array('items' => array(), 'title' => '')
    ),
    'link_block' => array(
      'variables' => array('loginlink' => '', 'registerlink' => ''),
    ),
  );
}
